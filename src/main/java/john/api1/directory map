application
    adapters        // concrete implementations (repositories, controllers)
        controllers
        repositories
        services
    components      // shared utilities
    async           // selected modules tweaked with multithreading function
    domain          // core agnostic business layer of their objects
        core            // complicated business logics
        models          // domain objects
    dto             // data transfer objects(request, mapping)
    ports           // interfaces
    services        // application's business logic
common
    config          // configurations


Services difference
    application layer - use cases logics, delegates domain and externals(controllers, repositories, components, etc.).

    domain layer - isolated layer, agnostic against externals, main system's existence, self own entities.


Data flow
    Request: JSON -> controller(JSON -mapped-> DTO-request) -> service(fields) -> repository(fields)
    Response: controller(domainObject -mapped-> DTO) <- service(domainObject) <- repository(entity -mapped-> domainObject)